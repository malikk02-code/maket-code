#include <Servo.h>
#include <LiquidCrystal.h>

// Inisialisasi LCD
LiquidCrystal lcd(11, 2, 4, 5, 6, 7);

Servo servo;
int angle = 0; // Sudut awal servo
int LED1 = 13;
const int trigPin1 = 10;
const int buzzerPin = 12;
const int echoPin1 = 9; // Pastikan tidak konflik dengan servo

long durasi = 0; // Inisialisasi durasi
int jarak = 0;   // Inisialisasi jarak

void setup() {
  servo.attach(8);
  servo.write(angle); // Servo pada posisi awal
  lcd.begin(16, 2);   // LCD 16x2
  pinMode(LED1, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  Serial.begin(9600);
}

void loop() {
  // Mengukur jarak
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);

  durasi = pulseIn(echoPin1, HIGH);

  // Jika tidak ada sinyal, set jarak ke nilai maksimum
  if (durasi == 0) {
    jarak = 400; // Misalnya, maksimum jarak dalam cm
  } else {
    jarak = (durasi * 0.034 / 2);
  }

  // Menampilkan jarak ke Serial Monitor
  Serial.print("Jarak: ");
  Serial.println(jarak);

  // Menampilkan jarak ke LCD
  lcd.setCursor(0, 0);
  lcd.print("Jarak: ");
  lcd.print(jarak);
  lcd.print(" cm   "); // Tambahkan spasi untuk membersihkan angka lama

  // Logika kontrol
  if (jarak >= 10 && jarak <= 20) { // Rentang jarak 10-20 cm
    digitalWrite(LED1, HIGH); // Nyalakan LED
    servo.write(72);          // Servo bergerak ke sudut 72
    tone(buzzerPin, 100);     // Buzzer menyala
  } else {
    digitalWrite(LED1, LOW);  // Matikan LED
    servo.write(0);           // Servo kembali ke sudut awal
    noTone(buzzerPin);        // Matikan buzzer
  }

  // Delay untuk stabilitas pembacaan
  delay(100);
}